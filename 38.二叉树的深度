#1.
# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def TreeDepth(self, pRoot):
        # write code here
        if pRoot is None:
            return 0
        count = max(self.TreeDepth(pRoot.left),self.TreeDepth(pRoot.right)) + 1
        return count
#2.
class Solution:
    def TreeDepth(self, pRoot):
        # write code here
        if pRoot is None:
            return 0
        count = self.levelOrder(pRoot)
        return count
    def levelOrder(self,root):
        res = []
        count = 0
        if root is None:
            return count
        q = []
        q.append(root)
        while len(q) != 0:
            tmp = []
            length = len(q)
            for i in range(length):
                r = q.pop(0)
                if r.left is not None:
                    q.append(r.left)
                if r.right is not None:
                    q.append(r.right)
                tmp.append(r.val)
            if tmp:
                count += 1
            res.append(tmp)
        return count
